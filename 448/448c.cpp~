#include <cstdio>
#include <iostream>
#include <vector>
#include <cassert>
using namespace std;
typedef long long ll;
#define N 16
int p[N][N];
vector<int> q[N+1];
bool vis[1<<N];
ll dp[1<<N][N];
bool r[N+1][N+1];
int n,m;
int cmp(int a,int b)
{
  return p[a][b]?a:b;
}
void gpos(int v,vector<int> & pp)
{
  for(int i=0,j=1;j<=v;++i,j<<=1)
    if(j&v)
      pp.push_back(i);
}
ll dfs(int msk,int v)
{
  if(!vis[msk])
    {
      vector<int> pos;
      gpos(msk,pos);
      int num=pos.size();
      for(int i=0;i<q[num].size();++i)
	{
	  int t=q[num][i];
	  int c=0;
	  vector<int> p1,p2;
	  for(int j=0,k=1;k<=t;++j,k<<=1)
	    if(t&k)
	      c|=(1<<pos[j]),p1.push_back(pos[j]);
	  vector<ll> z1,z2;
	  for(int j=0;j<p1.size();++j)
	    z1.push_back(dfs(c,p1[j]));
	  int cc=msk^c;
	  gpos(cc,p2);
	  for(int j=0;j<p2.size();++j)
	    z2.push_back(dfs(cc,p2[j]));
	  assert((c&cc)==0 && (c|cc)==msk && r[__builtin_popcount(msk)][__builtin_popcount(c)]);
	  for(int j=0;j<p1.size();++j)
	    for(int k=0;k<p2.size();++k)
	      dp[msk][cmp(p1[j],p2[k])]+=z1[j]*z2[k];
	}
      vis[msk]=true;
    }
  return dp[msk][v];
}
int main()
{
//   freopen("in","r",stdin);
  scanf("%d%d",&n,&m);
  for(int i=0;i<n;++i)
    for(int j=0;j<n;++j)
      scanf("%d",&p[i][j]);
  for(int i=1;i<=n;++i)
    {
      for(int j=i/2;j>0;--j)
	{
	  r[i][j]=true;
	  int jj=i-j;
	  if(jj==(jj&(-jj)))
	    break;
	}
    }
  for(int i=1;i<(1<<n);++i)
    {
      int c=__builtin_popcount(i);
      for(int j=2;j<=n;++j)
	if(r[j][c])
	  {
	    if((2*c<j && i<(1<<j)) || (2*c==j && i<(1<<(j-1))))
	      q[j].push_back(i);
	  }
    }
  for(int i=0;i<n;++i)
    dp[1<<i][i]=1,vis[1<<i]=true;
  cout<<dfs((1<<n)-1,m-1);
  return 0;
}

#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
const int N = 107;
int n, m[2];
int p[ N * N * 2 + N * 2 ][5], poi;
int s[ N * 2 ];
int dis[ N * 2 ];
bool in[ N * 2 ];
int pre[ N * 2 ];
int use[ N * 2 ];
int coup( int idx )
{
  return idx + ( idx & 1 ? 1 : -1 );
}
int ad( int from, int to, int f, int c, int id )
{
  ++poi;
  p[poi][0] = to, p[poi][1] = f, p[poi][2] = c, p[poi][3] = s[from],
    s[from] = poi, p[poi][4] = id;
}
int add( int from, int to, int c, int id )
{
  ad( from, to, 1, c, id );
  return ad( to, from, 0, -c, id );
}
bool dfs( int ss, int tt )
{
  memset( dis, 1 << 6; sizeof(dis) );
  memset( in, 0, sizeof(in) );
  dis[ss] = 0;
  for( ; ; )
    {
      int disI = 0;
      for( int i = 1; i <= 2 * n; ++i )
	if( !in[i] && dis[disI] > dis[i] && i != tt )
	  disI = i;
      if( disI == 0 )
	break;
      in[disI] = true;
      for( int i = s[disI]; i; i = p[i][3] )
	if( p[i][1] )
	  {
	    int t = p[i][0];
	    int tmp = dis[disI] + p[i][2];
	    if( !in[t] && dis[t] > tmp )
	      dis[t] = tmp, pre[t] = disI, use[t] = i;
	  }
    }
  if( dis[tt] < 0 )
    {
      for( int i = tt; i != ss ; i = pre[i] )
	p[use[i]][1] -= 1, p[ coup( use[i] ) ][1] += 1;
      return true;
    }
  return false;
}
int main()
{
  scanf("%d%d%d", &n, &m[0], &m[1] );
  for( int i = 0; i < 2; ++i )
    for( int j = 0; j < m[i]; ++j )
      {
	int a, b;
	scanf("%d%d", &a, &b);
	add( a, 2 * b, 0, i);
      }
  for( int i = 1; i <= n; ++i )
    q[i] = add( 2 * i, i, -1, -1);
  for( ; ; )
    {
      bool chg = false;
      for( int i = 1; i <= n; ++i )
	if( p[ q[i] ][1] == 0 )
	  {
	    if( dfs( i, 2 * i ) )
	      {
		int qq1 = q[i];
		int qq2 = coup( qq1 );
		p[qq1][1] = 1;
		p[qq2][1] = 0;
		chg = true;
	      }
	  }
      if( !chg )
	break;
    }
  vector<ppi> a[2];
  int ans(0);
  for( int i = 1; i <= n; ++i )
    if( p[q[i]][1] )
      {
	++ans;
	for( int j = s[i]; j; j = p[j][3] )
	  if( ( j & 1 ) &&  p[j][4] >= 0 && p[j][1] == 0 )
	    {
	      a[ p[j][4] ].push_back( ppi( i, p[j][0] / 2 ) );
	    }
      }
  printf("%d", ans / 2);
  for( int i = 0; i < 2; ++i )
    for( int j = 0; j < a[i].size(); ++j )
      printf("\n%d %d", a[i][j].first, a[i][j].second);
  return 0;
}

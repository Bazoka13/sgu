#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
using namespace std;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
#define N 10000
int p[N][2];
double q0[N][3];
double q[N][3];
double dir[N];
int n;
const double det=1e-5;
void get_line(int l,double d,double &a,double &b,double &c)
{
  double a0=q0[l][0],b0=q0[l][1],c0=q0[l][2];
  c=c0-dir[l]*d*sqrt(a0*a0+b0*b0);
  b=b0,a=a0;
}
bool get_poi(double &x,double &y,double *l1,double *l2)
{
  double a,b,c,a_,b_,c_;
  a=l1[0],b=l1[1],c=l1[2];
  a_=l2[0],b_=l2[1],c_=l2[2];
  double d=a*b_-a_*b;
  if(fabs(d)<det)
    return false;
  x=c_/d*b-c/d*b_;
  y=c/d*a_-c_/d*a;
  return true;
}
double cross(double x1,double y1,double x2,double y2)
{
  return x1*y2-x2*y1;
}
double dist(double x,double y,double *l)
{
  double a=l[0],b=l[1],c=l[2];
  return fabs(a*x+b*y+c)/sqrt(a*a+b*b);
}
int sig(double x,double y,double *l)
{
  double a=l[0],b=l[1],c=l[2];
  double t=x*a+b*y+c;
  if(fabs(t)<det)
    return 0;
  return t>0?1:-1;
}
bool test(double r)
{
  vector<int> left;
  left.push_back(0);
  left.push_back(1);
  left.push_back(2);
  FOR(i,3,n)
    {
      for(;left.size()>2;)
	{
	  double x1,y1,x2,y2,x3,y3;
	  int c=left.size();
	  if(!get_poi(x1,y1,q[left[c-3]],q[left[c-2]]))
	    return false;
	  if(!get_poi(x2,y2,q[left[c-2]],q[left[c-1]]))
	    return false;
	  if(!get_poi(x3,y3,q[left[c-1]],q[i]))
	    return false;
	  x3-=x2,y3-=y2;
	  x2-=x1,y2-=y1;
	  if(cross(x2,y2,x3,y3)<det)
	    left.pop_back();
	  else break;
	}
      left.push_back(i);
    }
  double xx(0.0),yy(0.0);
  FOR(i,0,left.size())
    {
      double x,y;
      get_poi(x,y,q[left[i]],q[left[(i+1)%left.size()]]);
      xx+=x,yy+=y;
    }
  xx/=left.size();
  yy/=left.size();
  FOR(i,0,n)
    if(sig(xx,yy,q0[i])!=dir[i] || (dist(xx,yy,q0[i])<r))
      return false;
  return true;
}
int main()
{
  scanf("%d",&n);
  double xx,yy;
  xx=yy=0.0;
  int mx,my,mix,miy;
  my=mx=-1e7,mix=miy=1e7;
  FOR(i,0,n)
    {
      scanf("%d%d",*(p+i),*(p+i)+1);
      mx=max(mx,p[i][0]),my=max(my,p[i][1]);
      mix=min(mix,p[i][0]),miy=min(miy,p[i][1]);
      xx+=p[i][0];
      yy+=p[i][1];
    }
  xx/=(double)n,yy/=(double)n;
  FOR(i,0,n)
    {
      double x0=p[i][0],y0=p[i][1];
      double x1=p[(i+1)%n][0],y1=p[(i+1)%n][1];
      double a=y1-y0,b=x0-x1;
      double c=-a*x0-b*y0;
      q0[i][0]=a,q0[i][1]=b,q0[i][2]=c;
      dir[i]=sig(xx,yy,q0[i]);
    }
  double ans=min(mx-mix,my-miy);;
  for(double f=0.0,t=ans;t-f>det;)
    {
      double m=(f+t)/(double)2.0;
      FOR(i,0,n)
	get_line(i,m,q[i][0],q[i][1],q[i][2]);
      if(test(m))
	f=m,ans=m;
      else t=m;
    }
  printf("%lf\n",ans);
  return 0;
}

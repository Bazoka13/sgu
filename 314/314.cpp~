#include <cstdio>
#include <iostream>
#include <map>
#include <utility>
#include <algorithm>
using namespace std;
typedef long long ll;
#define N 10007
#define M 50007
#define C 1000
const int mod=(C+1);
unsigned short p[M*2+1][4],poi;
unsigned short s[N][2];
unsigned short vis[N];
unsigned short point[N][3],pi;
void add(int f,int t,int d)
{
  ++poi,p[poi][0]=t,p[poi][1]=s[f][0],p[s[f][0]][3]=poi,
    s[f][0]=poi,p[poi][2]=d;
  ++poi,p[poi][0]=f,p[poi][1]=s[t][1],p[s[t][1]][3]=poi,
    s[t][1]=poi,p[poi][2]=d;
}
void del(int v,int e)
{
  int b=p[e][0];
  if(p[e][3]==0)
    s[v][0]=p[e][1],p[p[e][1]][3]=0;
  else p[p[e][3]][1]=p[e][1],p[p[e][1]][3]=p[e][3];
  if(e&1)
    ++e;
  else --e;
  if(p[e][3]==0)
    s[b][1]=p[e][1],p[p[e][1]][3]=0;
  else p[p[e][3]][1]=p[e][1],p[p[pe][1][3]=p[e][3];
}
void delp(int i)
{
  int f=point[i][0];
  if(point[i][3]==0)
    pi=point[i][1],point[i][3]=0;
  else point[point[i][3]][1]=point[i][1],point[point[i][1]][3]=point[i][3];
  int t=p[s[
}
int main()
{
  // read data
  int n,m,k,S,T;
  scanf("%d%d%d\n%d%d",&n,&m,&k,&S,&T);
  for(int i=0,f,t,d;i<m;++i)
    {
      scanf("%d%d%d",&f,&t,&d);
      add(f,t,d);
    }
  // dfs avaliable points
  queue<int> que;
  vis[S]=1;
  que.push(S);
  for(;!que.empty();)
    {
      int v=que.front();
      que.pop();
      for(int i=s[v][0];i;i=p[i][1])
	if(vis[p[i][0]]==0)
	  vis[p[i][0]]=1,que.push(p[i][0]);
    }
  if(vis[T])
    {
      que.push(T);
      vis[T]=2;
      for(;!que.empty();)
	{
	  int v=que.front();
	  que.pop();
	  for(int i=s[v][1];i;i=p[i][1])
	    if(vis[p[i][0]]==1)
	      vis[p[i][0]]=2,que.push(p[i][0]);
	}
      // delete useless edge
      for(int i=1;i<=n;++i)
	if(vis[i]==2)
	  {
	    ++pi;
	    point[pi][0]=i,point[pi][1]=pi-1,point[pi-1][3]=pi;
	    for(int j=s[i];j;j=p[j][1])
	      {
		int t=p[j][0];
		if(vis[t]!=2)
		  dele(i,j);
		else ++point[pi][2];
	      }
	  }
      for(int i=pi;i;i=point[pi][1])
	if(point[pi][2]==1)
	  delp(i);
    }
  return 0;
}

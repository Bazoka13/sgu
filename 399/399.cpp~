#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
using namespace std;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
#define M 17
#define N 17
char str[N][M+7];
int p[N][M][2];
const int dir[][2]={{-1,0},{1,0},{0,-1},{0,1}};
int q[(N*M*2)*(N*M*2)*2][4],qoi;
int sq[N*M*2];
bool zz[N*M*2];
int sss,s,t,n,m;
int cnt;
bool usd[(N*M*2)];
void dfs(int x,int y,int ss,int tt)
{
  if(p[x][y][0]==0 && str[x][y]=='X')
    {
      p[x][y][0]=ss,p[x][y][1]=tt;
      FOR(i,0,4)
	{
	  int xx=x+dir[i][0],yy=y+dir[i][1];
	  if(xx>=0 && yy>=0 && xx<n && yy<m)
	    dfs(xx,yy,ss,tt);
	}
    }
}
void add(int f,int t,int c,int cost)
{
  ++qoi,q[qoi][0]=t,q[qoi][1]=sq[f],sq[f]=qoi,q[qoi][2]=c,q[qoi][3]=cost;
  ++qoi,q[qoi][0]=f,q[qoi][1]=sq[t],sq[t]=qoi,q[qoi][2]=0,q[qoi][3]=-cost;
}
int dis[N*2*M*2],frm[N*2*M*2],in[N*2*M*2],use[N*2*M*2];
bool mf(int st)
{
  memset(dis,1<<6,sizeof(dis));
  queue<int> que;
  que.push(st);
  int inf=dis[t];
  dis[st]=0;
  in[st]=true;
  for(;!que.empty();)
    {
      int ci=que.front();
      que.pop();
      in[ci]=false;
      for(int i=sq[ci];i;i=q[i][1])
	if(q[i][2]>0)
	  {
	    int z=q[i][0];
	    if(dis[z]>dis[ci]+q[i][3])
	      {
		dis[z]=dis[ci]+q[i][3],frm[z]=ci,use[z]=i;
		if(!in[z])
		  in[z]=true,
		    que.push(z);
	      }
	  }
    }
  if(dis[t]<inf)
    {
      for(int i=t;i!=s;i=frm[i])
	{
	  cout<<i<<' ';
	  usd[frm[i]]=true;
	  int t=use[i];
	  q[t][2]-=1;
	  q[t+((t&1)?1:-1)][2]+=1;
	}
      cout<<endl;
      return true;
    }
  return false;
}
int main()
{
  scanf("%d%d",&n,&m);
  FOR(i,0,n)
    scanf("%s",str[i]);
  FOR(i,0,n)
    FOR(j,0,m)
    {
      if(str[i][j]=='.')
	p[i][j][0]=cnt++,
	  p[i][j][1]=cnt++;
      else
	dfs(i,j,cnt,cnt+1),
	  cnt+=2;
    }
  s=cnt++;
  t=cnt++;
  FOR(i,0,n)
    FOR(j,0,m)
    {
      if(str[i][j]=='.')
	{
	  FOR(k,0,4)
	    {
	      int x=i+dir[k][0],y=j+dir[k][1];
	      if(x<n && y<m && x>=0 && y>=0)
		add(p[i][j][1],p[x][y][0],2,0);
	    }
	  add(p[i][j][0],p[i][j][1],2,1);
	}
      else if(!zz[p[i][j][0]])
	add(p[i][j][0],p[i][j][1],2,0),
	  add(p[i][j][1],t,1,0),
	  zz[p[i][j][0]]=true;;
    }
  FOR(i,0,n)
    add(s,p[i][0][0],2,0),
    add(s,p[i][m-1][0],2,0);
  FOR(i,0,m)
    add(s,p[0][i][0],2,0),
    add(s,p[n-1][i][0],2,0);
  sss=cnt++;
  add(sss,s,2,0);
  for(;mf(sss);)
    ;
  FOR(i,0,n)
    {
      FOR(j,0,m)
	{
	  if(str[i][j]=='.')
	    printf("%c",usd[p[i][j][0]]?'*':'.');
	  else printf("X");
	}
      printf("\n");
    }
  return 0;
}
